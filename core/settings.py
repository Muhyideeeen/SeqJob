"""
Django settings for core project.

Generated by 'django-admin startproject' using Django 4.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/4.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.1/ref/settings/
"""

from pathlib import Path
import os
from urllib.parse import urlparse
from datetime import timedelta
import sentry_sdk
from sentry_sdk.integrations.django import DjangoIntegration

sentry_sdk.init(
    dsn="https://138f49c7c61a43929538f2dfeb6df37e@o4504735266242560.ingest.sentry.io/4504735269126144",
    integrations=[
        DjangoIntegration(),
    ],

    # Set traces_sample_rate to 1.0 to capture 100%
    # of transactions for performance monitoring.
    # We recommend adjusting this value in production.
    traces_sample_rate=1.0,

    # If you wish to associate users to errors (assuming you are using
    # django.contrib.auth) you may enable sending PII data.
    send_default_pii=True
)

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-zqd9esc48a@z28vcs32^7t02cu!rvk0ev1^1%avg&(%$x#-n_i'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',

    # installed apps
    'rest_framework',
    'rest_framework_simplejwt',
    "anymail",
    'corsheaders',
    "django_filters",
    'cloudinary',
    # custom apps
    'myauthentication',
    'jobs',
    'interview',
    'mailing',
    'medicals',
    'blog',
    "django_celery_results",
    "django_celery_beat",
]

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.security.SecurityMiddleware',
    "whitenoise.middleware.WhiteNoiseMiddleware",
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'core.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [Path(BASE_DIR, 'template')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'core.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.1/ref/settings/#databases
DATABASES = dict()
DATABASE_URL = os.environ.get('DATABASE_URL', None)
if not DATABASE_URL:
    DATABASES = {
        "default": {
            "ENGINE": 'django.db.backends.postgresql',
            "NAME": os.environ.get("DB_NAME"),
            "USER":  os.environ.get("DB_USER"),
            "PASSWORD":  os.environ.get("DB_PASS"),
            "HOST":  os.environ.get("DB_HOST"),
            "PORT":  os.environ.get("DB_PORT"),
            "CONN_MAX_AGE": 60,
        }
    }
else:
    db_info = urlparse(DATABASE_URL)
    DATABASES = {
        "default": {
            "ENGINE": 'django.db.backends.postgresql',
            "NAME": db_info.path[1:],
            "USER": db_info.username,
            "PASSWORD": db_info.password,
            "HOST": db_info.hostname,
            "PORT": db_info.port,
            "OPTIONS": {"sslmode": "require"},
            "CONN_MAX_AGE": 60,
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.1/topics/i18n/

LANGUAGE_CODE = 'en-us'


TIME_ZONE = 'Africa/Lagos'
CELERY_TIMEZONE = TIME_ZONE
USE_I18N = True
CELERY_ENABLE_UTC = False
USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.1/howto/static-files/

STATIC_URL = '/static/'
MEDIA_URL = '/media/'
STATIC_ROOT = BASE_DIR / "staticfiles"
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
# STATICFILES_DIRS  =[
#       BASE_DIR / "static",
# ]
# Default primary key field type
# https://docs.djangoproject.com/en/4.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


REST_FRAMEWORK = {
    'DEFAULT_AUTHENTICATION_CLASSES': (
        'rest_framework_simplejwt.authentication.JWTAuthentication',
    ),
    "EXCEPTION_HANDLER": "utils.exception.custom_exception_handler",
    "DEFAULT_PAGINATION_CLASS": "rest_framework.pagination.PageNumberPagination",
    "PAGE_SIZE": 30,
}
SIMPLE_JWT = {
    "ACCESS_TOKEN_LIFETIME": timedelta(hours=336),
    "REFRESH_TOKEN_LIFETIME": timedelta(hours=336),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "ALGORITHM": "HS256",
    "SIGNING_KEY": SECRET_KEY,
    "AUTH_HEADER_TYPES": ("Bearer",),
}

AUTH_USER_MODEL = 'myauthentication.User'

SITE_URL = os.environ['SITE_URL']

# cloudinary settings
"usiing cloudinary for storage"
CLOUDINARY_URL = os.environ["CLOUDINARY_URL"]
DEFAULT_FILE_STORAGE = "cloudinary_storage.storage.MediaCloudinaryStorage"


# corsheader related info
CORS_ALLOWED_ORIGINS = [
    "https://sequential-jobs-frontend.up.railway.app",
    "https://sequential-job-backend-production.up.railway.app",
    'https://recruitment-api-production.up.railway.app',
    'http://recruitment-api-production.up.railway.app',
    "http://localhost:3000",  # for nextjs localhost
    "http://localhost:3006",  # for nextjs localhost
    'https://sequential-job-production.up.railway.app',
    'http://sequential-job-production.up.railway.app',
    'http://www.sequentialjobs.com',
    'https://www.sequentialjobs.com',
    'https://sequentialjobs.com',
    'https://sequentialjobs.com',
    'https://app.sequentialjobs.com',
    'http://app.sequentialjobs.com',
]
CORS_ALLOW_METHODS = [
    'DELETE',
    'GET',
    'OPTIONS',
    'PATCH',
    'POST',
    'PUT',
]
CORS_ALLOW_HEADERS = [
    'accept',
    'accept-encoding',
    'authorization',
    'content-type',
    'dnt',
    'origin',
    'user-agent',
    'x-csrftoken',
    'x-requested-with',
]

CSRF_TRUSTED_ORIGINS = CORS_ALLOWED_ORIGINS


"Mail Settings"

# EMAIL_BACKEND = "anymail.backends.mailjet.EmailBackend"
# ANYMAIL = {
#     "MAILJET_API_KEY": os.environ['mailjet_apikey'],
#     "MAILJET_SECRET_KEY":os.environ['mailjet_secret_key'],
# }
EMAIL_BACKEND = "anymail.backends.sendinblue.EmailBackend"

PASSWORD_RESET_TIMEOUT_DAYS = 5

STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"


"Settings for celery"
redis_url = os.environ.get('REDIS_URL', None)
if redis_url:
    CELERY_BROKER_URL = redis_url
